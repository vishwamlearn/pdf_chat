from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import Chroma
from langchain_community.document_loaders import PyPDFLoader
from langchain.chains import RetrievalQA
from langchain_openai import OpenAIEmbeddings

import gradio as gr
from langchain_openai import ChatOpenAI

import os
from dotenv import load_dotenv

load_dotenv()

os.environ['OPENAI_API_KEY']=os.getenv("OPENAI_API_KEY")

# You can use this section to suppress warnings generated by your code:
def warn(*args, **kwargs):
    pass
import warnings
warnings.warn = warn
warnings.filterwarnings('ignore')

## LLM
def get_llm():
    model_llm=ChatOpenAI(model="gpt-4o")
    return model_llm

## Document loader
def document_loader(file):
    loader = PyPDFLoader(file.name)
    loaded_document = loader.load()
    return loaded_document

## Text splitter
def text_splitter(data):
    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=200,
        chunk_overlap=50,
        length_function=len,
    )
    chunks = text_splitter.split_documents(data)
    return chunks

## Vector db
from langchain_community.vectorstores import FAISS

# In your vector_database function
def vector_database(chunks):
    embedding_model = OpenAIEmbeddings(model="text-embedding-3-large")
    print("Creating FAISS vector database...")
    # FAISS builds an in-memory index by default
    vectordb = FAISS.from_documents(chunks, embedding_model) 
    print("FAISS vector database created successfully.")
    return vectordb

## Retriever
def retriever(file):
    splits = document_loader(file)
    chunks = text_splitter(splits)
    vectordb = vector_database(chunks)
    print(f'vectordb:{vectordb}')
    retriever = vectordb.as_retriever()
    print(f'retriever:{retriever}')
    return retriever

## QA Chain
def retriever_qa(file, query):
    try:
        llm = get_llm()
        retriever_obj = retriever(file)
        qa = RetrievalQA.from_chain_type(llm=llm,
                                         chain_type="stuff",
                                         retriever=retriever_obj,
                                         return_source_documents="False")
        response = qa.invoke(query)
        print(response)
        return response['result']
    except Exception as e:
        # Print the error to the console for debugging
        print(f"An error occurred: {e}")
        # Return a user-friendly error message
        return f"An error occurred. Please check the PDF file or your API key. Error details: {e}"
# Create Gradio interface
rag_application = gr.Interface(
    fn=retriever_qa,
    allow_flagging="never",
    inputs=[
        gr.File(label="Upload PDF File", file_count="single", file_types=['.pdf'], type="filepath"),  # Drag and drop file upload
        gr.Textbox(label="Input Query", lines=2, placeholder="Type your question here...")
    ],
    outputs=gr.Textbox(label="Answer"),
    title="PDF Question Answering Chatbot",
    description="Upload a PDF document and ask any question. The chatbot will try to answer using the provided document."
)

# Launch the app
rag_application.launch(server_name="localhost", server_port= 7860)